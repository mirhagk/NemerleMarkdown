using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Novacode;

namespace MarkdownParser
{
/// <summary>
/// Description of WordCreator.
/// </summary>
    class WordCreator
    {
        headers : List[Formatting] = List(9);
        plain = Formatting();
        public this()
        {
            foreach(i in [0..8])
            {
                headers.Add(Formatting());
                headers[i].Size=30 - i*2;
            }
            headers[0].Size = 30;
            plain.Size = 12;
        }
        AddNodesToParagraph(paragraph: Paragraph, nodes:List[ContentNode], style:Formatting):void
        {
            foreach(node in nodes)
            {
                _ = match(node.nodeType)
                {
                    | ContentNode.NodeType.Bold => {
                        style.Bold=true;
                        AddNodesToParagraph(paragraph, node.innerNodes, style);
                        style.Bold = false;
                    }
                    | ContentNode.NodeType.Italics => {
                        style.Italic = true;
                        AddNodesToParagraph(paragraph, node.innerNodes, style);
                        style.Italic = false;
                    }
                    | _ => paragraph.InsertText(node.text,false,style);
                }
            }
        }
        public MakeDocument(filename: string, nodes: List[Node]) : DocX
        {
            def document = DocX.Create(filename);
            def format = Formatting();
            format.Size = 20;
            foreach(node in nodes)
            {
                def style =
                               match(node.nodeType)
                               {
                                   | Node.NodeType.Heading(lvl) => headers[lvl];
                                   | _ => plain;
                               }
                def para = document.InsertParagraph("",false,style);
                AddNodesToParagraph(para,node.content,style);
            }
            document;
        }
    }
}
