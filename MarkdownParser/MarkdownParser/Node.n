using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace MarkdownParser
{
    [Record]
    public class ContentNode
    {
        public enum NodeType
        {
            | Text
            | Bold
            | Italics
        }
        public nodeType: NodeType;
        public innerNodes: List[ContentNode];
        public text: string;
    }
    //[Record]
    public class Node
    {
        public variant NodeType
        {
            | Heading 
                {
                    Level : int
                }
            | Paragraph
            | LineBreak
            | HorizontalRule
        }
        public nodeType : NodeType;
        public content:List[ContentNode];
        public this(nodeType: NodeType, content:List[ContentNode])
        {
            this.nodeType = nodeType;
            //fold the content nodes if they match
            this.content = List();
            mutable lastNode = null;
            foreach(node in content)
            {
                if (lastNode==null)
                {
                    this.content.Add(node);
                    lastNode = node;
                }
                else
                    {
                        if (lastNode.nodeType == node.nodeType)
                        {
                            this.content.RemoveAt(this.content.Count()-1);
                            lastNode = ContentNode(node.nodeType,List(), lastNode.text + node.text);
                            this.content.Add(lastNode);
                        }
                        else{
                            this.content.Add(node);
                            lastNode = node;
                        }
                    }
            }
            //this.content = content;
        }
        DotDotDot(text: string, length : int) : string
        {
            | _ when (text.Length < length) => text
            | _ => string.Join("", text.Take(length-3))+"..."
        }
        public override ToString():string
        {
                    def text = content.FoldLeft("",(i,acc)=>acc+i.text);
            nodeType.ToString().Split('+').Last() +"\n"
            + $"\t$(DotDotDot(text,50))";
        }
    }
}
